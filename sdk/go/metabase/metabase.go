// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package metabase

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Metabase struct {
	pulumi.ResourceState

	// The DNS name for the Metabase instance.
	DnsName pulumi.StringOutput `pulumi:"dnsName"`
	// The security group id for the Metabase instance.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
}

// NewMetabase registers a new resource with the given unique name, arguments, and options.
func NewMetabase(ctx *pulumi.Context,
	name string, args *MetabaseArgs, opts ...pulumi.ResourceOption) (*Metabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbSubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'DbSubnetIds'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.EcsSubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'EcsSubnetIds'")
	}
	if args.HostedZoneName == nil {
		return nil, errors.New("invalid value for required argument 'HostedZoneName'")
	}
	if args.LbSubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'LbSubnetIds'")
	}
	if args.OidcClientId == nil {
		return nil, errors.New("invalid value for required argument 'OidcClientId'")
	}
	if args.OidcClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'OidcClientSecret'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource Metabase
	err := ctx.RegisterRemoteComponentResource("metabase:index:Metabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type metabaseArgs struct {
	// The subnets to use for the RDS instance.
	DbSubnetIds []string `pulumi:"dbSubnetIds"`
	// The domain name on which to serve Metabase.  Must be a subdomain of the hostedZoneId.
	DomainName string `pulumi:"domainName"`
	// The subnets to use for the Fargate task.
	EcsSubnetIds []string `pulumi:"ecsSubnetIds"`
	// The email configuration (if any) for Metabase.
	//
	// Adding email integration enables users to set alerts and system notifications.
	//
	// https://www.metabase.com/docs/latest/administration-guide/02-setting-up-email.html
	EmailConfig *EmailConfig `pulumi:"emailConfig"`
	// A hosted zone name in which to provision DNS records.
	HostedZoneName string `pulumi:"hostedZoneName"`
	// The subnets to use for the load balancer.
	LbSubnetIds []string `pulumi:"lbSubnetIds"`
	// The version of Metabase to run - used as a tag on the `metabase/metabase` Dockerhub image.
	MetabaseVersion *string `pulumi:"metabaseVersion"`
	// Client ID for OIDC auth for the load balancer.
	OidcClientId string `pulumi:"oidcClientId"`
	// Client secret for OIDC auth for the load balancer.
	OidcClientSecret string `pulumi:"oidcClientSecret"`
	// The VPC to use for the Metabase cluster.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Metabase resource.
type MetabaseArgs struct {
	// The subnets to use for the RDS instance.
	DbSubnetIds pulumi.StringArrayInput
	// The domain name on which to serve Metabase.  Must be a subdomain of the hostedZoneId.
	DomainName pulumi.StringInput
	// The subnets to use for the Fargate task.
	EcsSubnetIds pulumi.StringArrayInput
	// The email configuration (if any) for Metabase.
	//
	// Adding email integration enables users to set alerts and system notifications.
	//
	// https://www.metabase.com/docs/latest/administration-guide/02-setting-up-email.html
	EmailConfig EmailConfigPtrInput
	// A hosted zone name in which to provision DNS records.
	HostedZoneName pulumi.StringInput
	// The subnets to use for the load balancer.
	LbSubnetIds pulumi.StringArrayInput
	// The version of Metabase to run - used as a tag on the `metabase/metabase` Dockerhub image.
	MetabaseVersion pulumi.StringPtrInput
	// Client ID for OIDC auth for the load balancer.
	OidcClientId pulumi.StringInput
	// Client secret for OIDC auth for the load balancer.
	OidcClientSecret pulumi.StringInput
	// The VPC to use for the Metabase cluster.
	VpcId pulumi.StringInput
}

func (MetabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metabaseArgs)(nil)).Elem()
}

type MetabaseInput interface {
	pulumi.Input

	ToMetabaseOutput() MetabaseOutput
	ToMetabaseOutputWithContext(ctx context.Context) MetabaseOutput
}

func (*Metabase) ElementType() reflect.Type {
	return reflect.TypeOf((**Metabase)(nil)).Elem()
}

func (i *Metabase) ToMetabaseOutput() MetabaseOutput {
	return i.ToMetabaseOutputWithContext(context.Background())
}

func (i *Metabase) ToMetabaseOutputWithContext(ctx context.Context) MetabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetabaseOutput)
}

// MetabaseArrayInput is an input type that accepts MetabaseArray and MetabaseArrayOutput values.
// You can construct a concrete instance of `MetabaseArrayInput` via:
//
//          MetabaseArray{ MetabaseArgs{...} }
type MetabaseArrayInput interface {
	pulumi.Input

	ToMetabaseArrayOutput() MetabaseArrayOutput
	ToMetabaseArrayOutputWithContext(context.Context) MetabaseArrayOutput
}

type MetabaseArray []MetabaseInput

func (MetabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Metabase)(nil)).Elem()
}

func (i MetabaseArray) ToMetabaseArrayOutput() MetabaseArrayOutput {
	return i.ToMetabaseArrayOutputWithContext(context.Background())
}

func (i MetabaseArray) ToMetabaseArrayOutputWithContext(ctx context.Context) MetabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetabaseArrayOutput)
}

// MetabaseMapInput is an input type that accepts MetabaseMap and MetabaseMapOutput values.
// You can construct a concrete instance of `MetabaseMapInput` via:
//
//          MetabaseMap{ "key": MetabaseArgs{...} }
type MetabaseMapInput interface {
	pulumi.Input

	ToMetabaseMapOutput() MetabaseMapOutput
	ToMetabaseMapOutputWithContext(context.Context) MetabaseMapOutput
}

type MetabaseMap map[string]MetabaseInput

func (MetabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Metabase)(nil)).Elem()
}

func (i MetabaseMap) ToMetabaseMapOutput() MetabaseMapOutput {
	return i.ToMetabaseMapOutputWithContext(context.Background())
}

func (i MetabaseMap) ToMetabaseMapOutputWithContext(ctx context.Context) MetabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetabaseMapOutput)
}

type MetabaseOutput struct{ *pulumi.OutputState }

func (MetabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Metabase)(nil)).Elem()
}

func (o MetabaseOutput) ToMetabaseOutput() MetabaseOutput {
	return o
}

func (o MetabaseOutput) ToMetabaseOutputWithContext(ctx context.Context) MetabaseOutput {
	return o
}

type MetabaseArrayOutput struct{ *pulumi.OutputState }

func (MetabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Metabase)(nil)).Elem()
}

func (o MetabaseArrayOutput) ToMetabaseArrayOutput() MetabaseArrayOutput {
	return o
}

func (o MetabaseArrayOutput) ToMetabaseArrayOutputWithContext(ctx context.Context) MetabaseArrayOutput {
	return o
}

func (o MetabaseArrayOutput) Index(i pulumi.IntInput) MetabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Metabase {
		return vs[0].([]*Metabase)[vs[1].(int)]
	}).(MetabaseOutput)
}

type MetabaseMapOutput struct{ *pulumi.OutputState }

func (MetabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Metabase)(nil)).Elem()
}

func (o MetabaseMapOutput) ToMetabaseMapOutput() MetabaseMapOutput {
	return o
}

func (o MetabaseMapOutput) ToMetabaseMapOutputWithContext(ctx context.Context) MetabaseMapOutput {
	return o
}

func (o MetabaseMapOutput) MapIndex(k pulumi.StringInput) MetabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Metabase {
		return vs[0].(map[string]*Metabase)[vs[1].(string)]
	}).(MetabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetabaseInput)(nil)).Elem(), &Metabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetabaseArrayInput)(nil)).Elem(), MetabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetabaseMapInput)(nil)).Elem(), MetabaseMap{})
	pulumi.RegisterOutputType(MetabaseOutput{})
	pulumi.RegisterOutputType(MetabaseArrayOutput{})
	pulumi.RegisterOutputType(MetabaseMapOutput{})
}
