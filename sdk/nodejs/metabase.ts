// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class Metabase extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'metabase:index:Metabase';

    /**
     * Returns true if the given object is an instance of Metabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Metabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Metabase.__pulumiType;
    }

    /**
     * The DNS name for the Metabase instance.
     */
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    /**
     * The security group id for the Metabase instance.
     */
    public /*out*/ readonly securityGroupId!: pulumi.Output<string>;

    /**
     * Create a Metabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetabaseArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.dbSubnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbSubnetIds'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.ecsSubnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ecsSubnetIds'");
            }
            if ((!args || args.hostedZoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostedZoneName'");
            }
            if ((!args || args.lbSubnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lbSubnetIds'");
            }
            if ((!args || args.oidcClientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'oidcClientId'");
            }
            if ((!args || args.oidcClientSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'oidcClientSecret'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["dbSubnetIds"] = args ? args.dbSubnetIds : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["ecsSubnetIds"] = args ? args.ecsSubnetIds : undefined;
            resourceInputs["emailConfig"] = args ? args.emailConfig : undefined;
            resourceInputs["hostedZoneName"] = args ? args.hostedZoneName : undefined;
            resourceInputs["lbSubnetIds"] = args ? args.lbSubnetIds : undefined;
            resourceInputs["metabaseVersion"] = args ? args.metabaseVersion : undefined;
            resourceInputs["oidcClientId"] = args ? args.oidcClientId : undefined;
            resourceInputs["oidcClientSecret"] = args ? args.oidcClientSecret : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["securityGroupId"] = undefined /*out*/;
        } else {
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["securityGroupId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Metabase.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Metabase resource.
 */
export interface MetabaseArgs {
    /**
     * The subnets to use for the RDS instance.
     */
    dbSubnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The domain name on which to serve Metabase.  Must be a subdomain of the hostedZoneId.
     */
    domainName: pulumi.Input<string>;
    /**
     * The subnets to use for the Fargate task.
     */
    ecsSubnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The email configuration (if any) for Metabase.
     *
     * Adding email integration enables users to set alerts and system notifications.
     *
     * https://www.metabase.com/docs/latest/administration-guide/02-setting-up-email.html
     */
    emailConfig?: pulumi.Input<inputs.EmailConfigArgs>;
    /**
     * A hosted zone name in which to provision DNS records.
     */
    hostedZoneName: pulumi.Input<string>;
    /**
     * The subnets to use for the load balancer.
     */
    lbSubnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The version of Metabase to run - used as a tag on the `metabase/metabase` Dockerhub image.
     */
    metabaseVersion?: pulumi.Input<string>;
    /**
     * Client ID for OIDC auth for the load balancer.
     */
    oidcClientId: pulumi.Input<string>;
    /**
     * Client secret for OIDC auth for the load balancer.
     */
    oidcClientSecret: pulumi.Input<string>;
    /**
     * The VPC to use for the Metabase cluster.
     */
    vpcId: pulumi.Input<string>;
}
