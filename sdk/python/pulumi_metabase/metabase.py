# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._inputs import *

__all__ = ['MetabaseArgs', 'Metabase']

@pulumi.input_type
class MetabaseArgs:
    def __init__(__self__, *,
                 db_subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 ecs_subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 lb_subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 vpc_id: pulumi.Input[str],
                 custom_domain: Optional[pulumi.Input['CustomDomainArgs']] = None,
                 email_config: Optional[pulumi.Input['EmailConfigArgs']] = None,
                 metabase_version: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Metabase resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] db_subnet_ids: The subnets to use for the RDS instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ecs_subnet_ids: The subnets to use for the Fargate task.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] lb_subnet_ids: The subnets to use for the load balancer.
        :param pulumi.Input[str] vpc_id: The VPC to use for the Metabase cluster.
        :param pulumi.Input['EmailConfigArgs'] email_config: The email configuration (if any) for Metabase.
               
               Adding email integration enables users to set alerts and system notifications.
               
               https://www.metabase.com/docs/latest/administration-guide/02-setting-up-email.html
        :param pulumi.Input[str] metabase_version: The version of Metabase to run - used as a tag on the `metabase/metabase` Dockerhub image.
        """
        pulumi.set(__self__, "db_subnet_ids", db_subnet_ids)
        pulumi.set(__self__, "ecs_subnet_ids", ecs_subnet_ids)
        pulumi.set(__self__, "lb_subnet_ids", lb_subnet_ids)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if email_config is not None:
            pulumi.set(__self__, "email_config", email_config)
        if metabase_version is not None:
            pulumi.set(__self__, "metabase_version", metabase_version)

    @property
    @pulumi.getter(name="dbSubnetIds")
    def db_subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The subnets to use for the RDS instance.
        """
        return pulumi.get(self, "db_subnet_ids")

    @db_subnet_ids.setter
    def db_subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "db_subnet_ids", value)

    @property
    @pulumi.getter(name="ecsSubnetIds")
    def ecs_subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The subnets to use for the Fargate task.
        """
        return pulumi.get(self, "ecs_subnet_ids")

    @ecs_subnet_ids.setter
    def ecs_subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ecs_subnet_ids", value)

    @property
    @pulumi.getter(name="lbSubnetIds")
    def lb_subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The subnets to use for the load balancer.
        """
        return pulumi.get(self, "lb_subnet_ids")

    @lb_subnet_ids.setter
    def lb_subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "lb_subnet_ids", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        The VPC to use for the Metabase cluster.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input['CustomDomainArgs']]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input['CustomDomainArgs']]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="emailConfig")
    def email_config(self) -> Optional[pulumi.Input['EmailConfigArgs']]:
        """
        The email configuration (if any) for Metabase.

        Adding email integration enables users to set alerts and system notifications.

        https://www.metabase.com/docs/latest/administration-guide/02-setting-up-email.html
        """
        return pulumi.get(self, "email_config")

    @email_config.setter
    def email_config(self, value: Optional[pulumi.Input['EmailConfigArgs']]):
        pulumi.set(self, "email_config", value)

    @property
    @pulumi.getter(name="metabaseVersion")
    def metabase_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of Metabase to run - used as a tag on the `metabase/metabase` Dockerhub image.
        """
        return pulumi.get(self, "metabase_version")

    @metabase_version.setter
    def metabase_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metabase_version", value)


class Metabase(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_domain: Optional[pulumi.Input[pulumi.InputType['CustomDomainArgs']]] = None,
                 db_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ecs_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 email_config: Optional[pulumi.Input[pulumi.InputType['EmailConfigArgs']]] = None,
                 lb_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metabase_version: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Metabase resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] db_subnet_ids: The subnets to use for the RDS instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ecs_subnet_ids: The subnets to use for the Fargate task.
        :param pulumi.Input[pulumi.InputType['EmailConfigArgs']] email_config: The email configuration (if any) for Metabase.
               
               Adding email integration enables users to set alerts and system notifications.
               
               https://www.metabase.com/docs/latest/administration-guide/02-setting-up-email.html
        :param pulumi.Input[Sequence[pulumi.Input[str]]] lb_subnet_ids: The subnets to use for the load balancer.
        :param pulumi.Input[str] metabase_version: The version of Metabase to run - used as a tag on the `metabase/metabase` Dockerhub image.
        :param pulumi.Input[str] vpc_id: The VPC to use for the Metabase cluster.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MetabaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Metabase resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MetabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MetabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_domain: Optional[pulumi.Input[pulumi.InputType['CustomDomainArgs']]] = None,
                 db_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ecs_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 email_config: Optional[pulumi.Input[pulumi.InputType['EmailConfigArgs']]] = None,
                 lb_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metabase_version: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MetabaseArgs.__new__(MetabaseArgs)

            __props__.__dict__["custom_domain"] = custom_domain
            if db_subnet_ids is None and not opts.urn:
                raise TypeError("Missing required property 'db_subnet_ids'")
            __props__.__dict__["db_subnet_ids"] = db_subnet_ids
            if ecs_subnet_ids is None and not opts.urn:
                raise TypeError("Missing required property 'ecs_subnet_ids'")
            __props__.__dict__["ecs_subnet_ids"] = ecs_subnet_ids
            __props__.__dict__["email_config"] = email_config
            if lb_subnet_ids is None and not opts.urn:
                raise TypeError("Missing required property 'lb_subnet_ids'")
            __props__.__dict__["lb_subnet_ids"] = lb_subnet_ids
            __props__.__dict__["metabase_version"] = metabase_version
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["dns_name"] = None
            __props__.__dict__["security_group_id"] = None
        super(Metabase, __self__).__init__(
            'metabase:index:Metabase',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> pulumi.Output[str]:
        """
        The DNS name for the Metabase instance.
        """
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Output[str]:
        """
        The security group id for the Metabase instance.
        """
        return pulumi.get(self, "security_group_id")

